{"version":3,"sources":["login_logo.svg","components/auth/RegisterModal.js","components/AppNavbar.js","components/Login.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","RegisterModal","state","modal","name","username","password","msg","toggle","setState","NavLink","onClick","this","href","Modal","isOpen","ModalHeader","ModalBody","Form","onSubmit","FormGroup","Label","for","Input","type","id","placeholder","className","onChange","OnChange","Button","color","style","marginTop","block","Component","ProptTypes","isAuthenticated","bool","error","object","isRequired","AppNavbar","Navbar","dark","expand","Container","NavbarBrand","NavbarToggler","Collapse","navbar","Nav","NavItem","Login","src","login_logo","alt","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"oFAAAA,EAAOC,QAAU,IAA0B,wC,0UCcrCC,E,4MACFC,MAAQ,CACJC,OAAO,EACPC,KAAQ,GACRC,SAAU,GACVC,SAAU,GACVC,IAAK,M,EAQTC,OAAS,WACL,EAAKC,SAAU,CACXN,OAAQ,EAAKD,MAAMC,S,uDAKvB,OACI,6BACG,kBAACO,EAAA,EAAD,CAASC,QAASC,KAAKJ,OAAQK,KAAM,KAArC,YAEC,kBAACC,EAAA,EAAD,CAAOC,OAAQH,KAAKV,MAAMC,MAAOK,OAAQI,KAAKJ,QAC1C,kBAACQ,EAAA,EAAD,CAAaR,OAASI,KAAKJ,QAA3B,YACA,kBAACS,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAMC,SAAWP,KAAKO,UAClB,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAOC,IAAI,YAAX,cACA,kBAACC,EAAA,EAAD,CACIC,KAAK,OACLpB,KAAO,YACPqB,GAAK,OACLC,YAAY,aACZC,UAAY,OACZC,SAAYhB,KAAKiB,WAGrB,kBAACR,EAAA,EAAD,CAAOC,IAAI,YAAX,aACA,kBAACC,EAAA,EAAD,CACIC,KAAK,OACLpB,KAAO,WACPqB,GAAK,OACLC,YAAY,YACZC,UAAY,OACZC,SAAYhB,KAAKiB,WAGrB,kBAACR,EAAA,EAAD,CAAOC,IAAI,SAAX,YACA,kBAACC,EAAA,EAAD,CACIC,KAAK,OACLpB,KAAO,WACPqB,GAAK,WACLC,YAAY,WACZC,UAAY,OACZC,SAAYhB,KAAKiB,WAIrB,kBAACR,EAAA,EAAD,CAAOC,IAAI,YAAX,YACA,kBAACC,EAAA,EAAD,CACIC,KAAK,WACLpB,KAAO,WACPqB,GAAK,WACLC,YAAY,WACZC,UAAY,OACZC,SAAYhB,KAAKiB,WAGrB,kBAACR,EAAA,EAAD,CAAOC,IAAI,YAAX,oBACA,kBAACC,EAAA,EAAD,CACIC,KAAK,WACLpB,KAAO,YACPqB,GAAK,YACLC,YAAY,WACZC,UAAY,OACZC,SAAYhB,KAAKiB,WAErB,kBAACC,EAAA,EAAD,CAAQC,MAAM,OAAOC,MAAQ,CAACC,UAAW,QAASC,OAAK,GAAvD,qB,GAhFJC,aAAtBlC,EASKmC,WAAa,CAChBC,gBAAiBD,IAAWE,KAC5BC,MAAOH,IAAWI,OAAOC,YAkFlBxC,QC/DAyC,E,4MA7BXxC,MAAQ,CACJa,QAAQ,G,EAEZP,OAAS,WACL,EAAKC,SAAS,CACVM,QAAS,EAAKb,MAAMa,U,uDAIxB,OACA,6BACI,kBAAC4B,EAAA,EAAD,CAAQZ,MAAQ,OAAOa,MAAI,EAACC,OAAS,KAAKlB,UAAY,QAClD,kBAACmB,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,6BACA,kBAACC,EAAA,EAAD,CAAerC,QAAWC,KAAKJ,SAC/B,kBAACyC,EAAA,EAAD,CAAUlC,OAAUH,KAAKV,MAAMa,OAAQmC,QAAM,GACzC,kBAACC,EAAA,EAAD,CAAKxB,UAAU,UAAUuB,QAAM,GAC3B,kBAACE,EAAA,EAAD,KACG,kBAAC,EAAD,gB,GApBPjB,a,iBCsBTkB,G,6KAtBP,OACI,kBAACnC,EAAA,EAAD,CAAMS,UAAU,cACZ,yBAAK2B,IAAKC,IAAY5B,UAAU,aAAa6B,IAAI,SACjD,kBAACpC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,cACA,kBAACE,EAAA,EAAD,CAAOC,KAAO,QAAQE,YAAa,WAEvC,kBAACN,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,iBACA,kBAACE,EAAA,EAAD,CAAOC,KAAO,WAAWE,YAAa,cAE1C,kBAACI,EAAA,EAAD,CAAQH,UAAY,6BAApB,SACA,yBAAKA,UAAW,eACZ,uBAAGd,KAAM,UAAT,WACA,0BAAMc,UAAU,OAAhB,KACA,uBAAGd,KAAM,UAAT,yB,GAjBAsB,c,YCOLsB,MAZf,WACE,OAEE,yBAAK9B,UAAU,OACX,kBAAC,EAAD,MACA,kBAAC,EAAD,QCCY+B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAnC,GACLoC,QAAQpC,MAAMA,EAAMqC,c","file":"static/js/main.9e0e38ce.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/login_logo.bdefc0da.svg\";","import React, { Component } from 'react';\nimport {\n    Button,\n    Modal,\n    ModalHeader,\n    ModalBody,\n    Form, \n    FormGroup,\n    Label, \n    Input,\n    NavLink\n} from 'reactstrap';\nimport ProptTypes from 'prop-types'\n\nclass RegisterModal extends Component {\n    state = {\n        modal: false,\n        name  : '',\n        username: '',\n        password: '',\n        msg: null\n    }\n\n    static ProptTypes = {\n        isAuthenticated: ProptTypes.bool,\n        error: ProptTypes.object.isRequired\n    }\n\n    toggle = () => {\n        this.setState( {\n            modal: !this.state.modal\n        });\n    }\n    \n    render(){\n        return (\n            <div>\n               <NavLink onClick={this.toggle} href =\"#\">Register</NavLink>\n\n                <Modal isOpen={this.state.modal} toggle={this.toggle}>\n                    <ModalHeader toggle ={this.toggle}>Register</ModalHeader>\n                    <ModalBody>\n                        <Form onSubmit= {this.onSubmit}>\n                            <FormGroup>\n                                <Label for=\"fistname\">First Name</Label>\n                                <Input \n                                    type=\"text\"\n                                    name = \"firstname\"\n                                    id = \"name\"\n                                    placeholder=\"First Name\"\n                                    className = \"mb-3\"\n                                    onChange = {this.OnChange}\n                                />\n\n                                <Label for=\"lastname\">Last Name</Label>\n                                <Input \n                                    type=\"text\"\n                                    name = \"lastname\"\n                                    id = \"name\"\n                                    placeholder=\"Last Name\"\n                                    className = \"mb-3\"\n                                    onChange = {this.OnChange}\n                                />\n\n                                <Label for=\"email\">Username</Label>\n                                <Input \n                                    type=\"text\"\n                                    name = \"username\"\n                                    id = \"username\"\n                                    placeholder=\"Username\"\n                                    className = \"mb-3\"\n                                    onChange = {this.OnChange}\n                                />\n\n\n                                <Label for=\"password\">Password</Label>\n                                <Input \n                                    type=\"password\"\n                                    name = \"password\"\n                                    id = \"password\"\n                                    placeholder=\"Password\"\n                                    className = \"mb-3\"\n                                    onChange = {this.OnChange}\n                                />\n                                \n                                <Label for=\"password\">Confrim Password</Label>\n                                <Input \n                                    type=\"password\"\n                                    name = \"cpassword\"\n                                    id = \"cpassword\"\n                                    placeholder=\"Password\"\n                                    className = \"mb-3\"\n                                    onChange = {this.OnChange}\n                                />\n                                <Button color='dark' style= {{marginTop: '2rem'}} block>\n                                    Register\n                                </Button> \n                            </FormGroup>\n                        </Form>\n                    </ModalBody>\n                </Modal>\n            </div>\n        );\n    }\n\n}\n\nexport default RegisterModal;","import React, { Component } from 'react';\nimport { \n    Collapse,\n    Navbar,\n    NavbarToggler,\n    NavbarBrand,\n    Nav,\n    NavItem,\n    Container \n} from 'reactstrap';\nimport RegisterModal from './auth/RegisterModal';\n\n\nclass AppNavbar extends Component {\n\n    state = {\n        isOpen: false\n    }\n    toggle = () => {\n        this.setState({\n            isOpen: !this.state.isOpen\n        })\n    }\n    render(){\n        return (\n        <div>\n            <Navbar color = \"dark\" dark expand = \"sm\" className = \"md-5\">\n                <Container>\n                    <NavbarBrand>Fuel Rate Web Portal</NavbarBrand>\n                    <NavbarToggler onClick = {this.toggle} />\n                    <Collapse isOpen = {this.state.isOpen} navbar>\n                        <Nav className=\"ml-auto\" navbar>\n                            <NavItem>\n                               <RegisterModal />\n                            </NavItem>\n                        </Nav>\n                    </Collapse>\n                </Container>\n            </Navbar>\n        </div>\n        );\n    }\n}\n\nexport default AppNavbar;","import React, { Component } from 'react';\nimport login_logo from '../login_logo.svg';\nimport '../Login.css';\nimport {\n    Button, \n    Form, \n    FormGroup,\n    Label,\n    Input\n} from 'reactstrap'\n\nclass Login extends Component {\n    render(){\n        return (\n            <Form className=\"login-form\">\n                <img src={login_logo} className=\"login_logo\" alt=\"logo\"></img>\n                <FormGroup>\n                    <Label>Email</Label>\n                    <Input type = \"email\" placeholder =\"Email\"></Input>\n                </FormGroup>\n                <FormGroup>\n                    <Label>Password</Label>\n                    <Input type = \"password\" placeholder =\"Password\"></Input>\n                </FormGroup>\n                <Button className = \"btn-lg btn-dark btn-block\">Login</Button>\n                <div className =\"other-links\">\n                    <a href =\"/login\">Sign up</a>\n                    <span className=\"p-2\">|</span>\n                    <a href =\"/login\">Forgot Password</a>\n                </div>\n            </Form>\n        )\n    }\n}\n\nexport default Login;","import React from 'react';\nimport AppNavbar from './components/AppNavbar';\nimport Login from './components/Login'\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport './App.css';\n\nfunction App() {\n  return (\n \n    <div className=\"App\">\n        <AppNavbar />\n        <Login />\n    </div>\n \n  );\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}