{"ast":null,"code":"var _jsxFileName = \"/Users/mubashirkhan/Documents/Fuel-Rate-Predictor-Web-Portal/client/src/components/FormQuote.js\";\nimport React, { useState, useEffect } from 'react';\nimport ProfileService from '../Services/ProfileService';\nimport FormService from '../Services/FormService';\nimport { getHistory, postHistory } from '../Services/HistoryService';\nimport { Button, Form, FormGroup, Label, Input } from 'reactstrap';\nimport '../App.css';\n\nconst FormQuote = props => {\n  const initialFormState = {\n    profileID: '',\n    address: '',\n    gallons: 0,\n    date: '',\n    suggested: 0,\n    total: 0\n  };\n  const [form, setForm] = useState(initialFormState);\n  const [historyRate, setHistoryRate] = useState({\n    rate_for_history: 0\n  });\n  const [h, setHistory] = useState({\n    gallons: 0,\n    address: '',\n    date: '',\n    suggested: 0,\n    total: 0,\n    profileID: 0\n  });\n  const [histArray, sethistArray] = useState([]); //array\n\n  const [message, setMessage] = useState(null);\n  useEffect(() => {\n    ProfileService.getProfile().then(data => {\n      //We need to check if profile exists\n      if (data.profile != null) {\n        setForm({ ...form,\n          address: `${data.profile.address}, ${data.profile.city} ${data.profile.state} ${data.profile.zipcode}`,\n          profileID: data.profile._id\n        });\n        setHistory({ ...h,\n          address: `${data.profile.address}, ${data.profile.city} ${data.profile.state} ${data.profile.zipcode}`,\n          profileID: data.profile._id\n        });\n      } else {\n        console.log(\"ERROR: NEED A PROFILE ADDRESS\");\n      }\n    });\n  }, []);\n  useEffect(() => {\n    FormService.getForm().then(data => {\n      if (data.form != null) {\n        setHistoryRate({ ...historyRate,\n          rate_for_history: .01\n        });\n      } else {\n        console.log(\"ERROR: NEED A PROFILE ADDRESS\");\n      }\n    });\n  }, []);\n  useEffect(() => {\n    getHistory().then(data => {\n      sethistArray(data.histArray);\n    });\n  }, []);\n\n  const onChange = e => {\n    e.preventDefault();\n    setForm({ ...form,\n      [e.target.name]: e.target.value\n    });\n    setHistory({ ...h,\n      [e.target.name]: e.target.value\n    });\n  };\n\n  const onSubmit = e => {\n    e.preventDefault();\n    FormService.postForm(form).then(data => {\n      const {\n        message\n      } = data;\n\n      if (!message.msgError) {\n        setMessage(message);\n        setForm(initialFormState);\n      } else {\n        setMessage(message);\n      }\n    });\n    postHistory(h).then(data => {});\n  };\n\n  const [isError, setError] = useState(false);\n  const [dateError, setDateError] = useState(false);\n\n  const priceModule = e => {\n    if (form.gallons <= 0) {\n      setError(true);\n    } else {\n      console.log('setError Else Block');\n      setError(false);\n    }\n\n    if (!form.date) {\n      setDateError(true);\n    } else if (new Date(form.date) < new Date()) {\n      setDateError(true);\n    } else {\n      console.log('setDateError Else Block');\n      setDateError(false);\n    }\n\n    console.log(\"date picked \", new Date(form.date));\n    console.log(\"date picked \", Date());\n    let locationfactor;\n    let gallons = form.gallons;\n    let gallonsRate;\n    let currDate = new Date(form.date);\n    let rateFluctuation;\n    const profit = 0.1;\n    let suggested = 0;\n    let total;\n    let historyFactor = historyRate.rate_for_history;\n    let str = form.address;\n\n    if (str.includes(\"TX\")) {\n      locationfactor = 0.02;\n    } else {\n      locationfactor = 0.04;\n    }\n\n    if (gallons > 1000) {\n      gallonsRate = 0.02;\n    } else {\n      gallonsRate = 0.03;\n    }\n\n    if (currDate >= new Date('2020/05/01') && currDate <= new Date('2020/08/30')) {\n      rateFluctuation = 0.03;\n    } else {\n      rateFluctuation = 0.04;\n    }\n\n    console.log(\"CurrDate: \", currDate);\n\n    if (gallons <= 0 || !form.date || currDate < new Date()) {\n      console.log('Inside error check', isError, dateError);\n      suggested = 0;\n      total = 0;\n    } else {\n      suggested = 1.50 + 1.5 * (locationfactor - historyFactor + gallonsRate + profit + rateFluctuation);\n      total = suggested * gallons;\n      suggested = (Math.round(suggested * 100) / 100).toFixed(2);\n      total = (Math.round(total * 100) / 100).toFixed(2);\n    }\n\n    setForm({ ...form,\n      suggested: suggested,\n      total: total\n    });\n    setHistory({ ...h,\n      suggested: suggested,\n      total: total\n    });\n    console.log(\"final values: \", suggested, total);\n  };\n\n  const {\n    address,\n    gallons,\n    date\n  } = form;\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Form, {\n    className: \"quoteForm\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(FormGroup, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Label, {\n    for: \"Gallons\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 15\n    }\n  }, \"Gallons Requested\"), /*#__PURE__*/React.createElement(Input, {\n    type: \"Number\",\n    name: \"gallons\",\n    value: gallons,\n    placeholder: \"Number of Gallons\",\n    className: \"mb-3\",\n    onChange: onChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 17\n    }\n  }), isError ? /*#__PURE__*/React.createElement(\"p\", {\n    className: \"text-danger\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 27\n    }\n  }, \" Please enter a valid gallon value\") : [], /*#__PURE__*/React.createElement(Label, {\n    for: \"address\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 194,\n      columnNumber: 15\n    }\n  }, \"Address\"), /*#__PURE__*/React.createElement(Input, {\n    type: \"text\",\n    name: \"address\",\n    className: \"mb-3\",\n    value: address,\n    disabled: true,\n    onChange: onChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 195,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(Label, {\n    for: \"Date\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 203,\n      columnNumber: 15\n    }\n  }, \"Delivery Date\"), /*#__PURE__*/React.createElement(Input, {\n    type: \"date\",\n    name: \"date\",\n    value: date,\n    className: \"mb-3\",\n    onChange: onChange,\n    required: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 204,\n      columnNumber: 17\n    }\n  }), dateError ? /*#__PURE__*/React.createElement(\"p\", {\n    className: \"text-danger\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 212,\n      columnNumber: 29\n    }\n  }, \"Please enter a correct date\") : [], /*#__PURE__*/React.createElement(Button, {\n    type: \"button\",\n    id: \"GetPrice\",\n    onClick: priceModule,\n    className: \"mb-3\",\n    block: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 214,\n      columnNumber: 15\n    }\n  }, \"Get Price\"), /*#__PURE__*/React.createElement(Label, {\n    for: \"Suggested Price\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 216,\n      columnNumber: 15\n    }\n  }, \"Suggested Price\"), /*#__PURE__*/React.createElement(Input, {\n    type: \"text\",\n    name: \"suggested\",\n    className: \"mb-3\",\n    value: form.suggested,\n    disabled: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 217,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(Label, {\n    for: \"Total\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 224,\n      columnNumber: 15\n    }\n  }, \"Total Amount Due\"), /*#__PURE__*/React.createElement(Input, {\n    type: \"text\",\n    name: \"total\",\n    value: form.total,\n    className: \"mb-3\",\n    disabled: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 225,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(Button, {\n    type: \"submit\",\n    onClick: onSubmit,\n    className: \"mb-3\",\n    block: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 232,\n      columnNumber: 15\n    }\n  }, \"Submit Quote\"))));\n};\n\nexport default FormQuote;","map":{"version":3,"sources":["/Users/mubashirkhan/Documents/Fuel-Rate-Predictor-Web-Portal/client/src/components/FormQuote.js"],"names":["React","useState","useEffect","ProfileService","FormService","getHistory","postHistory","Button","Form","FormGroup","Label","Input","FormQuote","props","initialFormState","profileID","address","gallons","date","suggested","total","form","setForm","historyRate","setHistoryRate","rate_for_history","h","setHistory","histArray","sethistArray","message","setMessage","getProfile","then","data","profile","city","state","zipcode","_id","console","log","getForm","onChange","e","preventDefault","target","name","value","onSubmit","postForm","msgError","isError","setError","dateError","setDateError","priceModule","Date","locationfactor","gallonsRate","currDate","rateFluctuation","profit","historyFactor","str","includes","Math","round","toFixed"],"mappings":"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","sourcesContent":["import React, {useState,  useEffect} from 'react';\nimport ProfileService from '../Services/ProfileService';\nimport FormService from '../Services/FormService';\nimport { getHistory, postHistory } from '../Services/HistoryService';\nimport {\n    Button,\n    Form, \n    FormGroup,\n    Label, \n    Input,\n} from 'reactstrap';\nimport '../App.css';\n\nconst FormQuote = props => {\n  const initialFormState = {\n    profileID: '',\n    address: '',\n    gallons: 0,\n    date: '',\n    suggested: 0,\n    total: 0, \n  }\n\n  const [form, setForm] = useState(initialFormState);\n  \n  const [historyRate, setHistoryRate] = useState({\n      rate_for_history : 0,\n  });\n  \n  const [h, setHistory] = useState({\n      gallons: 0,\n      address: '',\n      date: '',\n      suggested: 0,\n      total: 0,\n      profileID: 0,\n  });\n\n  const [histArray, sethistArray ] = useState([]); //array\n  const [message, setMessage] = useState(null);\n\n        useEffect(() => {       \n            ProfileService.getProfile().then(data => {\n                //We need to check if profile exists\n                if(data.profile != null){\n                    setForm({...form, address: `${data.profile.address}, ${data.profile.city} ${data.profile.state} ${data.profile.zipcode}`, profileID: data.profile._id})\n                    setHistory({...h, address:  `${data.profile.address}, ${data.profile.city} ${data.profile.state} ${data.profile.zipcode}`, profileID: data.profile._id})\n                }else{\n                    console.log(\"ERROR: NEED A PROFILE ADDRESS\")\n                }\n            });\n        },[]);\n\n\n        useEffect(() => {\n            FormService.getForm().then(data => {\n                if(data.form != null){\n                    setHistoryRate({...historyRate, rate_for_history : .01})\n                }else{\n                    console.log(\"ERROR: NEED A PROFILE ADDRESS\")\n                }\n            })\n        },[]);\n\n        useEffect(() => {\n            getHistory().then(data => {\n                sethistArray(data.histArray);\n            })\n        },[]);\n\n        const onChange = e => {\n            e.preventDefault();\n            setForm({...form, [e.target.name]:e.target.value})\n\n            setHistory({...h, [e.target.name]: e.target.value})\n            \n        }\n        const onSubmit = e => {\n            e.preventDefault();\n            FormService.postForm(form).then(data => {\n                const {message} = data;\n                if(!message.msgError){\n                    setMessage(message);\n                    setForm(initialFormState);\n                }\n                else{\n                    setMessage(message);\n                }\n            })\n            postHistory(h).then(data => {\n            })\n        }\n        \n        const [isError, setError] = useState(false);\n\n        const [dateError, setDateError] = useState(false);\n    \n        const priceModule = e => {\n            \n        \n            if (form.gallons <= 0){\n                setError(true);\n            }\n            else {\n                console.log('setError Else Block');\n                setError(false);\n            }\n            \n            if (!form.date){\n                setDateError(true);\n            }\n            else if(new Date(form.date)  < new Date() ){\n                setDateError(true);\n\n            }\n            else{\n              console.log('setDateError Else Block');\n                setDateError(false);\n            }\n           \n            console.log(\"date picked \",new Date(form.date))\n            console.log(\"date picked \",Date())\n\n            let locationfactor;\n            let gallons = form.gallons;\n            let gallonsRate;\n            let currDate = new Date(form.date);\n            let rateFluctuation;\n            const profit = 0.1;\n            let suggested = 0; \n            let total;\n            let historyFactor = historyRate.rate_for_history;\n            \n            let str = form.address;\n            if(str.includes(\"TX\")){\n                locationfactor = 0.02;\n            }\n            else{\n                locationfactor = 0.04;\n            }\n\n            if(gallons > 1000){\n                gallonsRate = 0.02;\n            }\n            else{\n                gallonsRate = 0.03;\n            }\n\n            if(currDate >= new Date('2020/05/01') && currDate <= new Date('2020/08/30')){\n                rateFluctuation = 0.03;\n            }else{\n                rateFluctuation = 0.04;\n            }\n         \n            console.log(\"CurrDate: \",currDate)\n     \n            if(gallons <= 0 || !form.date || currDate  < new Date()){\n              console.log('Inside error check', isError, dateError);\n              \n              suggested = 0;\n              total = 0; \n            }\n            else {\n                suggested = 1.50 + 1.5*(locationfactor - historyFactor + gallonsRate + profit+ rateFluctuation);\n                total = suggested * gallons;\n                suggested = (Math.round(suggested * 100) / 100).toFixed(2);\n                total = (Math.round(total * 100) / 100).toFixed(2);\n                \n            }\n\n            setForm({...form, suggested: suggested, total: total})\n            setHistory({...h, suggested: suggested, total: total }) \n            console.log(\"final values: \", suggested, total)\n\n        }\n\n        const { address, gallons, date} = form;\n        \n        return (\n        <div>\n          <Form className=\"quoteForm\" >\n            <FormGroup>\n              <Label for=\"Gallons\">Gallons Requested</Label>\n                <Input\n                  type=\"Number\"\n                  name=\"gallons\"\n                  value={gallons}\n                  placeholder=\"Number of Gallons\"\n                  className=\"mb-3\"\n                  onChange={onChange}\n                />\n              {isError ? (<p className=\"text-danger\"> Please enter a valid gallon value</p>) : []}\n\n              <Label for ='address'>Address</Label>\n                <Input \n                  type=\"text\"\n                  name=\"address\"\n                  className=\"mb-3\"\n                  value={address}\n                  disabled\n                  onChange={onChange} \n                />\n              <Label for=\"Date\">Delivery Date</Label>\n                <Input \n                  type=\"date\"\n                  name=\"date\"\n                  value={date}\n                  className=\"mb-3\"\n                  onChange={onChange}\n                  required \n                />\n              {dateError ? (<p className=\"text-danger\">Please enter a correct date</p>): []}\n\n              <Button type=\"button\" id= \"GetPrice\" onClick={priceModule} className=\"mb-3\" block>Get Price</Button>\n\n              <Label for = 'Suggested Price'>Suggested Price</Label>\n                <Input \n                  type=\"text\"\n                  name=\"suggested\"\n                  className= \"mb-3\"\n                  value={form.suggested}\n                  disabled\n                />\n              <Label for = 'Total'>Total Amount Due</Label>\n                <Input \n                  type=\"text\"\n                  name=\"total\"\n                  value={form.total}\n                  className=\"mb-3\"\n                  disabled\n                />\n              <Button type='submit' onClick = {onSubmit} className = 'mb-3' block>Submit Quote</Button>\n            </FormGroup>\n          </Form>\n        </div>\n    );\n}\n\nexport default FormQuote;"]},"metadata":{},"sourceType":"module"}