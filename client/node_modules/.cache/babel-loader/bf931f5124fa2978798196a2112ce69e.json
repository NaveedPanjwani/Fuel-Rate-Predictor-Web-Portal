{"ast":null,"code":"var _jsxFileName = \"/Users/mubashirkhan/Documents/Fuel-Rate-Predictor-Web-Portal/client/src/components/auth/RegisterModal.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport ProptTypes from 'prop-types';\nimport { register } from '../../actions/authActions';\nimport { clearErrors } from '../../actions/errorActions';\nimport { Button, Modal, ModalHeader, ModalBody, Form, FormGroup, Label, Input, NavLink, Alert } from 'reactstrap';\nimport axios from 'axios';\n\nclass RegisterModal extends Component {\n  constructor(props) {\n    super(props);\n\n    this.toggle = () => {\n      //clear errors\n      //this.props.clearErrors();\n      this.setState({\n        modal: !this.state.modal\n      });\n    };\n\n    this.onChange = e => {\n      this.setState({\n        [e.target.name]: e.target.value\n      });\n    };\n\n    this.validate = () => {\n      let usernameError;\n\n      if (!this.state.username) {\n        usernameError = \"Must enter username.\";\n      }\n    };\n\n    this.onSubmit = e => {\n      e.preventDefault();\n      const newUser = {\n        username: this.state.username,\n        password: this.state.password\n      }; //const newUser = this.state\n\n      const isValid = this.alidate();\n\n      if (isValid) {\n        console.log(\"Final Data is: \", newUser);\n      }\n\n      axios.post('http://localhost:4000/api/user/add', newUser).then(res => console.log(res.data));\n      this.setState({\n        username: '',\n        password: ''\n      }); //this.props.register(newUser);\n    };\n\n    this.state = {\n      username: '',\n      password: '',\n      usernameError: '',\n      passwordError: ''\n    };\n  } // static ProptTypes = {\n  //     isAuthenticated: ProptTypes.bool,\n  //     error: ProptTypes.object.isRequired,\n  //     register: ProptTypes.func.isRequired,\n  //     clearErrors : ProptTypes.func.isRequired\n  // }\n  // componentDidUpdate(pervProps){\n  //     const { error, isAuthenticated } = this.props;\n  //     if(error !== pervProps.error){\n  //         //check for register error\n  //         if(error.id === 'REGISTER_FAIL'){\n  //             this.setState({msg: error.msg.msg})\n  //         } else {\n  //             this.setState({msg: null});\n  //         }\n  //     }\n  //     //close modal, if authenticated\n  //     if(this.state.modal){\n  //         if(isAuthenticated){\n  //             this.toggle();\n  //         }\n  //     }\n  // }\n\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(NavLink, {\n      onClick: this.toggle,\n      href: \"#\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 16\n      }\n    }, \"Register\"), /*#__PURE__*/React.createElement(Modal, {\n      isOpen: this.state.modal,\n      toggle: this.toggle,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(ModalHeader, {\n      toggle: this.toggle,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 21\n      }\n    }, \"Register\"), /*#__PURE__*/React.createElement(ModalBody, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 21\n      }\n    }, this.state.msg ? /*#__PURE__*/React.createElement(Alert, {\n      color: \"danger\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 21\n      }\n    }, this.state.msg) : null, /*#__PURE__*/React.createElement(Form, {\n      onSubmit: this.onSubmit,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(FormGroup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(Label, {\n      for: \"username\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 33\n      }\n    }, \"Username\"), /*#__PURE__*/React.createElement(Input, {\n      type: \"text\",\n      name: \"username\",\n      placeholder: \"Username\",\n      className: \"mb-3\",\n      value: this.state.username,\n      onChange: this.onChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 33\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 33\n      }\n    }, this.state.usernameError), /*#__PURE__*/React.createElement(Label, {\n      for: \"password\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 33\n      }\n    }, \"Password\"), /*#__PURE__*/React.createElement(Input, {\n      type: \"password\",\n      name: \"password\",\n      placeholder: \"Password\",\n      className: \"mb-3\",\n      value: this.state.password,\n      onChange: this.onChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 33\n      }\n    }), /*#__PURE__*/React.createElement(Button, {\n      type: \"submit\",\n      color: \"dark\",\n      style: {\n        marginTop: '2rem'\n      },\n      block: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 33\n      }\n    }, \"Register\"))))));\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  isAuthenticated: state.auth.isAuthenticated,\n  error: state.error\n});\n\nexport default connect(mapStateToProps, {\n  register,\n  clearErrors\n})(RegisterModal);","map":{"version":3,"sources":["/Users/mubashirkhan/Documents/Fuel-Rate-Predictor-Web-Portal/client/src/components/auth/RegisterModal.js"],"names":["React","Component","connect","ProptTypes","register","clearErrors","Button","Modal","ModalHeader","ModalBody","Form","FormGroup","Label","Input","NavLink","Alert","axios","RegisterModal","constructor","props","toggle","setState","modal","state","onChange","e","target","name","value","validate","usernameError","username","onSubmit","preventDefault","newUser","password","isValid","alidate","console","log","post","then","res","data","passwordError","render","msg","marginTop","mapStateToProps","isAuthenticated","auth","error"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport ProptTypes from 'prop-types';\nimport { register } from '../../actions/authActions';\nimport { clearErrors } from '../../actions/errorActions'\nimport {\n    Button,\n    Modal,\n    ModalHeader,\n    ModalBody,\n    Form, \n    FormGroup,\n    Label, \n    Input,\n    NavLink,\n    Alert\n} from 'reactstrap';\nimport axios from 'axios'\n\nclass RegisterModal extends Component {\n \n    constructor(props){\n        super(props) \n            this.state = {\n                username: '',\n                password : '',\n                usernameError: '',\n                passwordError: ''\n        }\n    }\n\n    // static ProptTypes = {\n    //     isAuthenticated: ProptTypes.bool,\n    //     error: ProptTypes.object.isRequired,\n    //     register: ProptTypes.func.isRequired,\n    //     clearErrors : ProptTypes.func.isRequired\n    // }\n\n    // componentDidUpdate(pervProps){\n    //     const { error, isAuthenticated } = this.props;\n    //     if(error !== pervProps.error){\n    //         //check for register error\n    //         if(error.id === 'REGISTER_FAIL'){\n    //             this.setState({msg: error.msg.msg})\n    //         } else {\n    //             this.setState({msg: null});\n    //         }\n    //     }\n\n    //     //close modal, if authenticated\n    //     if(this.state.modal){\n    //         if(isAuthenticated){\n    //             this.toggle();\n    //         }\n    //     }\n    // }\n\n\n    toggle = () => {\n        //clear errors\n        //this.props.clearErrors();\n        this.setState( {\n            modal: !this.state.modal\n        });\n    }\n\n    onChange = e => {\n        this.setState({\n            [e.target.name] : e.target.value\n        })\n    }\n\n    validate = () => {\n        let usernameError: \"\";\n\n        if(!this.state.username){\n            usernameError =\"Must enter username.\";\n        }\n    }\n\n    onSubmit = e => {\n        e.preventDefault();\n\n        const newUser = {\n            username : this.state.username,\n            password : this.state.password\n        }\n\n        //const newUser = this.state\n        const isValid = this.alidate();\n        if(isValid){\n            console.log(\"Final Data is: \", newUser)\n        }\n\n        axios.post('http://localhost:4000/api/user/add', newUser)\n            .then(res => console.log(res.data))\n        \n        this.setState({\n            username: '',\n            password: ''\n        })\n\n        //this.props.register(newUser);\n    }\n    \n    render(){\n        return (\n            <div>\n               <NavLink onClick={this.toggle} href =\"#\">Register</NavLink>\n\n                <Modal isOpen={this.state.modal} toggle={this.toggle}>\n                    <ModalHeader toggle ={this.toggle}>Register</ModalHeader>\n                    <ModalBody>\n                    { this.state.msg ? (\n                    <Alert color='danger'>{this.state.msg}</Alert>\n                    ) : null}\n                        <Form onSubmit= {this.onSubmit}>\n                            <FormGroup>\n                                <Label for=\"username\">Username</Label>\n                                <Input \n                                    type = \"text\"\n                                    name = \"username\"\n                                    placeholder=\"Username\"\n                                    className = \"mb-3\"\n                                    value = {this.state.username}\n                                    onChange = {this.onChange}\n                                />\n                                <div>\n                                    {this.state.usernameError}\n                                </div>\n\n                                <Label for=\"password\">Password</Label>\n                                <Input \n                                    type=\"password\"\n                                    name = \"password\"\n                                    placeholder=\"Password\"\n                                    className = \"mb-3\"\n                                    value = {this.state.password}\n                                    onChange = {this.onChange}\n                                />\n                            \n                                <Button type='submit' color='dark' style= {{marginTop: '2rem'}} block>\n                                    Register\n                                </Button> \n                            </FormGroup>\n                        </Form>\n                    </ModalBody>\n                </Modal>\n            </div>\n        );\n    }\n\n}\n\nconst mapStateToProps = state => ({\n    isAuthenticated: state.auth.isAuthenticated,\n    error: state.error\n})\n\nexport default connect(\n    mapStateToProps,\n    { register, clearErrors }\n)(RegisterModal);"]},"metadata":{},"sourceType":"module"}