{"ast":null,"code":"import { returnErrors } from './errorActions';\nimport axios from 'axios';\nimport { USER_LOADED, USER_LOADING, AUTH_ERROR, LOGIN_SUCCESS, LOGIN_FAIL, LOGOUT_SUCCESS, REGISTER_SUCESS, REGISTER_FAIL } from './types'; //CHECK TOKEN AND LOAD USER: Make a request to api/auth.js\n\nexport const loadUser = () => (dispatch, getState) => {\n  //User loading\n  dispatch({\n    type: USER_LOADING\n  });\n  axios.get('/api/get/auth/user', tokenConfig(getState)).then(res => dispatch({\n    type: USER_LOADED,\n    payload: res.data\n  })).catch(err => {\n    dispatch(returnErrors(err.response.data, err.response.status));\n    dispatch({\n      type: AUTH_ERROR\n    });\n  });\n}; //Register new user\n\nexport const register = ({\n  username,\n  password\n}) => dispatch => {\n  //headers\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  }; //request body\n\n  const body = JSON.stringify({\n    username,\n    password\n  });\n  axios.post('api/user', body, config).then(res => dispatch({\n    type: REGISTER_SUCESS,\n    payload: res.data\n  })).catch(err => {\n    dispatch(returnErrors(err.response.data, err.response.status, 'REGISTER_FAIL'));\n    dispatch({\n      type: REGISTER_FAIL\n    });\n  });\n};\nexport const tokenConfig = getState => {\n  //Get token from localstorage\n  const token = getState().auth.token; //Headers\n\n  const config = {\n    headers: {\n      'Content-type': 'application/json'\n    }\n  }; //if token, add to headers\n\n  if (token) {\n    config.headers['x-auth-toke'] = token;\n  }\n\n  return config;\n};","map":{"version":3,"sources":["/Users/mubashirkhan/Documents/Fuel-Rate-Predictor-Web-Portal/client/src/actions/authActions.js"],"names":["returnErrors","axios","USER_LOADED","USER_LOADING","AUTH_ERROR","LOGIN_SUCCESS","LOGIN_FAIL","LOGOUT_SUCCESS","REGISTER_SUCESS","REGISTER_FAIL","loadUser","dispatch","getState","type","get","tokenConfig","then","res","payload","data","catch","err","response","status","register","username","password","config","headers","body","JSON","stringify","post","token","auth"],"mappings":"AAAA,SAASA,YAAT,QAA6B,gBAA7B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SACIC,WADJ,EAEIC,YAFJ,EAGIC,UAHJ,EAIIC,aAJJ,EAKIC,UALJ,EAMIC,cANJ,EAOIC,eAPJ,EAQIC,aARJ,QASO,SATP,C,CAWA;;AACA,OAAO,MAAMC,QAAQ,GAAI,MAAM,CAACC,QAAD,EAAWC,QAAX,KAAwB;AACnD;AACAD,EAAAA,QAAQ,CAAC;AAACE,IAAAA,IAAI,EAAEV;AAAP,GAAD,CAAR;AAEAF,EAAAA,KAAK,CACAa,GADL,CACS,oBADT,EAC8BC,WAAW,CAACH,QAAD,CADzC,EAEKI,IAFL,CAEUC,GAAG,IAAIN,QAAQ,CAAC;AAClBE,IAAAA,IAAI,EAAEX,WADY;AAElBgB,IAAAA,OAAO,EAAED,GAAG,CAACE;AAFK,GAAD,CAFzB,EAMKC,KANL,CAMWC,GAAG,IAAI;AACVV,IAAAA,QAAQ,CAACX,YAAY,CAACqB,GAAG,CAACC,QAAJ,CAAaH,IAAd,EAAoBE,GAAG,CAACC,QAAJ,CAAaC,MAAjC,CAAb,CAAR;AACAZ,IAAAA,QAAQ,CAAC;AACLE,MAAAA,IAAI,EAAET;AADD,KAAD,CAAR;AAGH,GAXL;AAaH,CAjBM,C,CAmBP;;AACA,OAAO,MAAMoB,QAAQ,GAAG,CAAC;AAACC,EAAAA,QAAD;AAAWC,EAAAA;AAAX,CAAD,KAA0Bf,QAAQ,IAAI;AAC1D;AACA,QAAMgB,MAAM,GAAG;AACXC,IAAAA,OAAO,EAAE;AACL,sBAAiB;AADZ;AADE,GAAf,CAF0D,CAQ1D;;AACA,QAAMC,IAAI,GAAGC,IAAI,CAACC,SAAL,CAAe;AAACN,IAAAA,QAAD;AAAWC,IAAAA;AAAX,GAAf,CAAb;AAEAzB,EAAAA,KAAK,CAAC+B,IAAN,CAAW,UAAX,EAAsBH,IAAtB,EAA4BF,MAA5B,EACKX,IADL,CACUC,GAAG,IAAIN,QAAQ,CAAC;AAClBE,IAAAA,IAAI,EAAEL,eADY;AAElBU,IAAAA,OAAO,EAAED,GAAG,CAACE;AAFK,GAAD,CADzB,EAKKC,KALL,CAKWC,GAAG,IAAI;AACVV,IAAAA,QAAQ,CAACX,YAAY,CAACqB,GAAG,CAACC,QAAJ,CAAaH,IAAd,EAAoBE,GAAG,CAACC,QAAJ,CAAaC,MAAjC,EAAyC,eAAzC,CAAb,CAAR;AACAZ,IAAAA,QAAQ,CAAC;AACLE,MAAAA,IAAI,EAAEJ;AADD,KAAD,CAAR;AAGH,GAVL;AAWH,CAtBM;AAyBP,OAAO,MAAMM,WAAW,GAAGH,QAAQ,IAAI;AAC/B;AACA,QAAMqB,KAAK,GAAGrB,QAAQ,GAAGsB,IAAX,CAAgBD,KAA9B,CAF+B,CAI/B;;AACA,QAAMN,MAAM,GAAG;AACXC,IAAAA,OAAO,EAAE;AACL,sBAAiB;AADZ;AADE,GAAf,CAL+B,CAW/B;;AACA,MAAGK,KAAH,EAAU;AACNN,IAAAA,MAAM,CAACC,OAAP,CAAe,aAAf,IAAgCK,KAAhC;AACH;;AAED,SAAON,MAAP;AACP,CAjBM","sourcesContent":["import { returnErrors } from './errorActions'\nimport axios from 'axios';\nimport {\n    USER_LOADED,\n    USER_LOADING,\n    AUTH_ERROR,\n    LOGIN_SUCCESS,\n    LOGIN_FAIL,\n    LOGOUT_SUCCESS,\n    REGISTER_SUCESS,\n    REGISTER_FAIL\n} from './types';\n\n//CHECK TOKEN AND LOAD USER: Make a request to api/auth.js\nexport const loadUser =  () => (dispatch, getState) => {\n    //User loading\n    dispatch({type: USER_LOADING});\n\n    axios\n        .get('/api/get/auth/user',tokenConfig(getState))\n        .then(res => dispatch({\n            type: USER_LOADED,\n            payload: res.data\n        }))\n        .catch(err => {\n            dispatch(returnErrors(err.response.data, err.response.status));\n            dispatch({\n                type: AUTH_ERROR\n            });\n        });\n\n};\n\n//Register new user\nexport const register = ({username, password}) => dispatch => {\n    //headers\n    const config = {\n        headers: {\n            'Content-Type' : 'application/json'\n        }\n    }\n\n    //request body\n    const body = JSON.stringify({username, password});\n\n    axios.post('api/user',body, config)\n        .then(res => dispatch({\n            type: REGISTER_SUCESS,\n            payload: res.data\n        }))\n        .catch(err => {\n            dispatch(returnErrors(err.response.data, err.response.status, 'REGISTER_FAIL'));\n            dispatch({\n                type: REGISTER_FAIL\n            });\n        })\n}\n\n\nexport const tokenConfig = getState => {\n        //Get token from localstorage\n        const token = getState().auth.token;\n\n        //Headers\n        const config = {\n            headers: {\n                'Content-type' : 'application/json'\n            }\n        }\n    \n        //if token, add to headers\n        if(token) {\n            config.headers['x-auth-toke'] = token;\n        }\n\n        return config;\n}"]},"metadata":{},"sourceType":"module"}