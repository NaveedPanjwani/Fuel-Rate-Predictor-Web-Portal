<<<<<<< HEAD
router.post(
  '/me',
  auth,
  [
    //check('username', 'Please enter a number')
    //.not()
    //.isEmpty(),
    check('Gallons_Requested', 'Please enter a number').isNumeric(),
    //check('Delivery_Address', 'Please put address in Profile Management')
    //.not()
    //.isEmpty(),
    check('Delivery_Date', 'Please select Date')
      .not()
      .isEmpty(),
    //check('Suggested_Price', 'Leave Blank').isEmpty(),
    //check('Total_Amount_Due', 'Leave Blank').isEmpty()
  ],



async (req, res) => {
    try {
      const errors = validationResult(req);
      if (!errors.isEmpty()) {
        return res.status(400).json({ errors: errors.array() });
      }
      /*const user = await User.findOne({ user: req.username });
      if (!user) {
        return res
          .status(400)
          .json({ msg: 'There is no profile for this user' });
      }
      */
      let { Gallons_Requested, Delivery_Date } = req.body;
      const username = req.user.username;
      /*
      if (!isNaN(Gallons_Requested)) {
        return res.status(400).json({ msg: 'Not a Number' });
      }
      if (!isValidDate(Delivery_Date)) {
        return res.status(400).json({ msg: 'Not a Date' });
      }
      */
      //const profile = await Profile.find({ req.user.name });
      //const Delivery_Address = profile.address;
      // Will implement Suggested Price later
      // Will implement Total amount Due later
      const user = req.user;
      res.json(user);
    } catch (err) {
      console.error(err.message);
      res.status(500).send('Server Error');
    }
    //console.log(req.body);
  }


//**user.js**
// router.route('/').get(async (req, res) => {
//   try {
//     const users = await User.find().select('-password');
//     res.send(users);
//   } catch (err) {
//     console.error(err.message);
//     res.status(500).send('Server Error');
//   }  
//   });

// router.route('/add').post(
//   [
//     check('username', 'user is required and must bt 7 or more characters').isLength({ min: 7}),
//     check('password', 'Please enter a password with 7 or more characters').isLength({ min: 7})
    
//   ],
//   async (req, res)=>{

//     const errors = validationResult(req);
//     if(!errors.isEmpty()){
//       return res.status(400).json({errors: errors.array()})
//     }

//     const {username, password} = req.body
//     try {
//         let user = await User.findOne({username});

//         if(user){
//             return res.status(401).json({message: 'Username or password is taken'})
//         }

//         user = await User.create({
//             username, password
//         })
//         return res.status(200).json({ message: 'OK', user });
//     } catch (error) {
//         res.status(500).json({error})
//     }
//     const payload = {
//       user: {
//         id: user.username
//       }
//     };
//     jwt.sign(payload, config.get('jwtSecret'), (err, token) => {
//       if (err) throw err;
//       res.json({ token });
//     });
// });


//profile.js
//route: POST api/auth,
// easy description: login in someone
// description:Authenticate user and get token
// access: public:

// router.post('/',passport.authenticate('jwt', {session: false}), async (req, res) => {
//   try {
//     let user = await Profile.findOne({ username: req.user.id });
//     if (!username) {
//       const { fullname, address, address2, city, state, zipcode } = req.body;
//       profile = await Profile.create({
//         username: req.user.id,
//         fullname,
//         address,
//         address2,
//         city,
//         state,
//         zipcode,
//       });
//     }
//     if (username) {
//       //we need to display the contents of the profile on the page.
//     }
//     return res.status(200).json({ message: 'OK', forum });
//   } catch (err) {
//     console.error(err.message);
//     res.status(500).send('Server error');
//   }
// });